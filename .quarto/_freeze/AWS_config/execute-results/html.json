{
  "hash": "80ef2290301c8087bcf3a85daed5632a",
  "result": {
    "markdown": "---\nexecute:\n  eval: false\n---\n\n\n# Setting up access to the Amazon S3 bucket {#sec-aws_setup}\nTo access data that is stored in private AWS S3 cloud storage buckets access credentials must be set. This guide provides step-by-step instructions for configuring AWS credentials using two methods and using them with various tools.\n\n## Method 1\nThe first method of setting up only needs to be configured once per device/profile. This is the suggested method if using a personal device that will access the AWS bucket often. Additional help and information can be found https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html. GDAL, Python and R packages, the AWS CLI, etc. will all detect this login info automatically if it is done correctly. \n\n**Steps**: \n\n1. Create a directory called .aws in the home directory.\n2. In ~/.aws/ create an empty file called 'credentials'. \n   - **IMPORTANT NOTE: This is basically just a text file, but there should be there is no file extension. If the file is named credential.txt, it will not work.**\n3. Open this file with a txt editor and create a [default] profile with the access_key_id and secret_access_key.\n4. Create other profiles as needed with other access keys and secret keys.\n5. Although not always required (GDAL presets to AWS_REGION = \"us-east-1\"), if dealing with buckets in multiple regions or getting an error about the region/a key not being found, a config file specifying the region and return type can be made. Keep the output set to json. *NOTE:* This is the bucket region, not the region of the user. **For the digital-atlas bucket, the region is \"us-east-1\"**\n\n### Example:\n\n**File locations**:\n```\nLinux or macOS:\n~/.aws/credentials AKA /home/USERNAME/.aws/credentials \n\nWindows:\nC:\\Users\\USERNAME\\.aws\\credentials\n```\n**Credentials file**:\n```\n[default]\naws_access_key_id=AKIAIOSFODNN7EXAMPLE\naws_secret_access_key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\n\n[read_only_user]\naws_access_key_id=AKIAI44QH8DHBEXAMPLE\naws_secret_access_key=je7MtGbClwBF/2Zp9Utk/h3yCo8nvbEXAMPLEKEY\n\n[zarr_bucket]\naws_access_key_id=AKIAI46QZ8DHBEXAMPLE\naws_secret_access_key=xl7MjGbClwBF/2hp9Htk/h3gCo7nvbEXAMPLEKEY\n```\n**Config file**:\n```\n[default]\nregion=us-east-1\noutput=json\n\n[profile read_only_user]\nregion=us-west-2\noutput=json\n\n[profile zarr_bucket]\nregion=us-west-2\noutput=text\n```\n## Method 2\nThis method sets the AWS details as environmental variables and needs to be reconfigured each time a session ends. This can also be used to override the above ~/.aws/credentials or  ~/.aws/config variables if needed. It can be done from within R or Python or through the command line. \n\nR: \n\n::: {.cell}\n\n```{.r .cell-code}\nSys.setenv(\n    AWS_ACCESS_KEY_ID = 'AKIAIOSFODNN7EXAMPLE',\n    AWS_SECRET_ACCESS_KEY = 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY',\n    AWS_REGION = \"us-east-1\"\n    )\n```\n:::\n\n\nPython:\n\n::: {.cell python.reticulate='false'}\n\n```{.python .cell-code}\nimport os\nos.environ['AWS_ACCESS_KEY_ID'] = 'AKIAIOSFODNN7EXAMPLE'\nos.environ['AWS_SECRET_ACCESS_KEY'] = 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY'\nos.environ['AWS_REGION'] = \"us-east-1\"\n```\n:::\n\n\nLinux/macOS shell:\n\n::: {.cell}\n\n```{.bash .cell-code}\nexport AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE\nexport AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\nexport AWS_DEFAULT_REGION=us-east-1\n```\n:::",
    "supporting": [
      "AWS_config_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}